package com.example.Registration.Login.WebSecurityConfig;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

import com.example.Registration.Login.UserDetailService.CustomUserDetailsService;

@Configuration
@EnableMethodSecurity
public class SecSecurityConfig {

	@Autowired
	private DataSource dataSource;
	
	@Bean
	public CustomUserDetailsService userDetailsService(){
		return new CustomUserDetailsService();
		
	
	}
	   
    @Bean
    public BCryptPasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
    
    @Bean
    public DaoAuthenticationProvider authenticationProvider() {
        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
        authProvider.setUserDetailsService(userDetailsService());
        authProvider.setPasswordEncoder(passwordEncoder());
         
        return authProvider;
    }
    
    

	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		auth.authenticationProvider(authenticationProvider());
	}
	

	
 @Bean
	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
	 http.csrf()
     .disable()
     .authorizeRequests()
     .antMatchers("/Users/**")
     .authenticated()
     .anyRequest()
     .permitAll()
     .and()
     .formLogin()
     .loginPage("/login.html")
     .loginProcessingUrl("/process_login")
     .defaultSuccessUrl("/login_success", true)
     .failureUrl("/login_failure")
     .and()
     .logout((logout) -> logout.logoutSuccessUrl("/"));

     return http.build();
	 
	 }
}
	 
