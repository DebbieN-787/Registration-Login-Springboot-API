package com.example.Registration.Login.AppController;


import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import com.example.Registration.Login.LoginAuthService.CustomAuthenticationProvider;
import com.example.Registration.Login.LoginRequest.LoginRequest;
import com.example.Registration.Login.User.Repository.UserRepository;
import com.example.Registration.Login.User.user.entity.User;
 

@Controller
public class AppController {
 
	 @Autowired
	    private UserRepository repo;
	 
	@Autowired 
	private CustomAuthenticationProvider authenticationservice;
     
    @GetMapping("")
    public String viewHomePage() {
        return "index";
    }
    @GetMapping("/register")
    public String showRegistrationForm(Model model) {
        model.addAttribute("user", new User());
         
        return "signup_form";
    }
    
    @PostMapping("/process_register")
    public String processRegister(User user) {
    	BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
    	   String encodedPassword = encoder.encode(user.getPassword());
    	    user.setPassword(encodedPassword);
    	     
    	repo.save(user);
    	
    	return "register_success";
    
}
    @GetMapping("/users")
    public String listUsers(Model model) {
        List<User> listUsers = repo.findAll();
        model.addAttribute("listUsers", listUsers);
         
        return "users";
    }
    
    @GetMapping("/login_success")
    public String showLoginSucess(){
    	return "login_success";
	}
    
    @GetMapping("/login_failure")
    public String showLoginFailure(){
    	return "login_failure";
    }
    
    @GetMapping("/login")
    public String login(Model model){
    	
    	return "login_form";
    	
    }
    
    @GetMapping("/logout")
    public String logout(HttpServletRequest request){
    	request.getSession().invalidate();
    	
    	return "logout";
    }
   
    @PostMapping("/process_login")
    public String processLogin(@RequestBody LoginRequest loginRequest){
    	if (authenticationservice.authenticate(loginRequest)){
    		
    		return "/login_success";
    	} else {
    	
    	return "/login_failure";
    	
    }
    	
   
    
    }
}
   
	
